// Generated by CoffeeScript 2.0.0-alpha1
var Card, Modal, Start, body, contextmenu, dir, error, head, header, loader, log, txt;

log = console.log, error = console.error, dir = console.dir;

body = document.body, head = document.head;

Card = class Card {
  constructor(title, message) {
    this.container = pen("div").Class("card-container").returnElement();
    this.titleContainer = pen("div").Class("card-title-container");
    this.messageContainer = pen("div").Class("card-message-container").returnElement();
    this.message = pen("span").Class("card-message").Html(title !== null ? title : '').returnElement();
    this.title = pen("span").Class("card-title").Html(message !== null ? message : '').returnElement();
    pen(this.titleContainer).Append(this.title);
    pen(this.messageContainer).Append(this.message);
    pen(this.container).Append(this.titleContainer, this.messageContainer);
    return this;
  }

  setTitle(str) {
    return pen(this.title).Html(str).returnElement();
  }

  setMessage(str) {
    return pen(this.message).Html(str).returnElement();
  }

  Style(el, stroobj) {
    return pen(this[el]).Css(stroobj).returnElement();
  }

};

Modal = class Modal {
  constructor(headstr, bodystr, footstr) {
    var Remove;
    this.container = pen("div").Class("modal-container");
    this.head = pen("div").Class("modal-head");
    this.body = pen("div").Class("modal-body");
    this.foot = pen("div").Class("modal-foot");
    this.closebtn = pen("span").Class("close-button").Html("X");
    Remove = function(e) {
      pen(this.container).Remove();
      pen(this.closebtn).removeEventListener("click", Remove);
    };
    pen(this.closebtn).On("click", Remove);
    this.headText = pen("h2").Class("modal-head-text").Html(headerstr !== null ? headerstr : '');
    this.bodyText = pen("p").Class("modal-body-text").Html(bodystr !== null ? bodystr : '');
    this.footText = pen("h2").Class("modal-foot-text").Html(footstr !== null ? footstr : '');
    return this;
  }

  setHead(str) {
    return pen(this.headText).Html(str).returnElement();
  }

  setText(str) {
    return pen(this.bodyText).Html(str).returnElement();
  }

  Style(el, stroobj) {
    return pen(this[el]).Css(stroobj).returnElement();
  }

};

txt = pen("p").Html("loading...").returnElement();

loader = pen("div").Class("loader").Append(txt).AppendTo(body).returnElement();

contextmenu = {
  commands: {},
  menu: pen("div").Class("contextmenu").returnElement(),
  addCommand: function(name, ev) {
    var self;
    self = contextmenu;
    self.commands[name] = {
      el: pen("span").Html(name).Class("contextmenu-command").On("click", ev).returnElement(),
      hr: pen("hr").Class("contextmenu-divider").returnElement()
    };
    return self;
  },
  removeCommand: function(name) {
    var self;
    self = contextmenu;
    pen(self.commands[name].el).Remove();
    pen(self.commands[name].hr).Remove();
    return self;
  },
  remove: function() {
    var name, self;
    self = contextmenu;
    for (name in self.commands) {
      self.removeCommand(name);
    }
    return window.removeEventListener("click", self.remove);
  },
  init: function(e) {
    var name, self;
    self = contextmenu;
    pen(self.menu).Css({
      top: `${e.clientY}px`,
      left: `${e.clientX}px`
    });
    for (name in self.commands) {
      pen(self.menu).Append(self.commands[name].el, self.commands[name].hr);
    }
    window.addEventListener("click", self.remove);
    return self;
  }
};

header = {
  buttons: {},
  head: pen("div").Class("header").returnElement(),
  title: pen("span").Class("title").Html(document.title).returnElement(),
  addButton: function(name, event) {
    var self;
    self = header;
    self.buttons[view] = pen("span").Class("header-button Ril").Html(name).On("click", event).returnElement();
    return self;
  },
  removeButton: function(name) {
    var self;
    self = header;
    pen(self.buttons[name]).Remove();
    return self;
  },
  init: function() {
    var brs, i, j, name, self;
    self = header;
    pen(self.head).Append(self.title);
    for (name in self.buttons) {
      pen(self.head).Append(self.buttons[name]);
    }
    pen(document.body).Append(self.head);
    brs = [];
    for (i = j = 0; j <= 4; i = ++j) {
      brs[i] = pen("br").returnElement();
    }
    return self;
  }
};

Start = function(e) {
  contextmenu.addCommand("reload", () => {
    return location.reload();
  }).addCommand("go back", () => {
    return location.back();
  }).addCommand("go forward", () => {
    return location.forward();
  });
  window.addEventListener("contextmenu", contextmenu.init);
  header.addButton("X", () => {
    return window.close();
  }).addButton("-", () => {
    return window.minimize();
  }).addButton("[_]", () => {
    return window.maximize();
  }).init();
  pen(loader).Remove();
  return log(`load took ${Math.round(e.timeStamp)} second(s)`);
};

window.onload = Start;
