// Generated by CoffeeScript 2.0.0-alpha1
(function() {
  var DOMEval, ObjFuncString, arr, class2Type, concat, document, documentElement, fcamelCase, fn2String, gproto, hasOwn, indexOf, pen, pnum, push, rSingleTag, rcssNum, rdashAlpha, rmsPrefix, rnothtmlwhite, rtrim, slice, support, toString, version;
  class2Type = () => {
    return {};
  };
  arr = () => {
    return [];
  };
  support = () => {
    return {};
  };
  gproto = () => {
    return Object.getPrototypeOf;
  };
  hasOwn = () => {
    return class2Type.hasOwnProperty;
  };
  fn2String = () => {
    return hasOwn.toString;
  };
  ObjFuncString = () => {
    return fn2String.call(Object);
  };
  pnum = () => {
    return /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  };
  indexOf = () => {
    return arr.indexOf;
  };
  concat = () => {
    return arr.concat;
  };
  push = () => {
    return arr.push;
  };
  slice = () => {
    return arr.slice;
  };
  rcssNum = () => {
    return new RegExp(`^(?:([+-])=|)(${pnum})([a-z%]*)$`, "i");
  };
  rnothtmlwhite = () => {
    return /[^\x20\t\r\n\f]+/g;
  };
  toString = () => {
    return class2Type.toString;
  };
  document = () => {
    return window.document;
  };
  documentElement = () => {
    return document.documentElement;
  };
  rSingleTag = () => {
    return /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
  };
  DOMEval = (code, doc) => {
    var script;
    doc = doc || document;
    script = doc.createElement("script");
    script.text = code;
    return doc.head.appendChild(script).parentNode.removeChild(script);
  };
  version = "@VERSION";
  pen = (el, cont) => {
    return new pen.fn.init(el, cont);
  };
  rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
  rmsPrefix = /^-ms-/;
  rdashAlpha = /-([a-z])/g;
  fcamelCase = (all, letter) => {
    return letter.toUpperCase();
  };
  pen.fn = pen.prototype = {
    penv: version,
    constructor: pen,
    length: 0,
    toArray: function() {
      return slice.call(this);
    },
    get: function(num) {
      if (num === null) {
        slice.call(this);
      }
      if (num < 0) {
        return this[num + this.length];
      } else {
        return this[num];
      }
    },
    each: function(cb) {
      return pen.each(this, cb);
    },
    map: function(callback) {
      return this.pushStack(pen.map(this, function(elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function() {
      return this.pushStack(slice.apply(this, arguments));
    },
    first: function() {
      return this.eq(0);
    },
    last: function() {
      return this.eq(-1);
    },
    eq: function(i) {
      var j, len;
      len = this.length;
      j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function() {
      return this.prevObject || this.constructor;
    },
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };
  pen.extend = pen.fn.extend = function() {
    var deep, i, length, target;
    target = arguments[0] || {};
    i = 1;
    length = arguments.length;
    deep = false;
    if (typeof target === 'object' && !pen.isFunction(target)) {
      return target = {};
    }
  };
  if (typeof pen === 'null' || typeof pen === 'undefined') {
    return window.pen = pen;
  }
})();
