// Generated by CoffeeScript 2.0.0-alpha1
(function(window, document) {
  var Pendef, body, dir, error, head, log, type;
  log = console.log, error = console.error, dir = console.dir;
  body = document.body, head = document.head;
  type = (function() {
    var classToType, i, j, len, name, ref;
    classToType = {};
    ref = "Boolean Number String Function Array Date RegExp Undefined Null Error Symbol".split(/\s+/);
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      name = ref[i];
      classToType[`[object ${name}]`] = name.toLowerCase();
    }
    return function(obj) {
      var strType;
      strType = Object.prototype.toString.call(obj);
      return classToType[strType] || "object";
    };
  })();
  Pendef = function() {
    var pen;
    pen = function(el) {
      var err;
      err = new Error(`Pen: parameter 1 can't be a ${type(el)}`);
      switch (type(el)) {
        case "error":
        case "boolean":
        case "number":
        case "function":
        case "array":
        case "date":
        case "regexp":
        case "undefined":
        case "null":
        case "symbol":
          throw err;
      }
      if (type(el) === 'string') {
        if (pen.options["to selector"] === true) {
          if (pen.options["select all"] === true) {
            pen.pesh = document.querySelectorAll(el);
          } else {
            pen.pesh = document.querySelector(el);
          }
        } else {
          pen.pesh = document.createElement(el);
        }
      } else {
        pen.pesh = el;
      }
      if (pen.options["auto append"] === true) {
        if (pen.options["normally append to"] === "body") {
          body.appendChild(pen.pesh);
        } else if (pen.options["normally append to"] === 'head') {
          head.appendChild(pen.pesh);
        } else {
          pen.options["normally append to"].appendChild(pen.pesh);
        }
      }
      return pen;
    };
    pen.Class = function(str) {
      pen.pesh.setAttribute('class', str);
      return pen;
    };
    pen.Id = function(str) {
      pen.pesh.setAttribute('id', str);
      return pen;
    };
    pen.Html = function(str, app = false) {
      switch (pen.pesh.tagName.toLowerCase()) {
        case 'input':
        case 'textarea':
          if (str != null) {
            if (app === false) {
              pen.pesh.value = str;
              return pen;
            } else {
              pen.pesh.value += str;
              return pen;
            }
          } else {
            return pen.pesh.value;
          }
          break;
        default:
          if (str != null) {
            if (app === false) {
              pen.pesh.innerHTML = str;
              return pen;
            } else {
              pen.pesh.innerHTML += str;
              return pen;
            }
          } else {
            return pen.pesh.innerHTML;
          }
      }
    };
    pen.Css = function(rulen, rule) {
      if (rulen != null) {
        if (type(rulen) === 'object') {
          for (rule in rulen) {
            pen.pesh.style[rule] = rulen[rule];
          }
        } else {
          pen.pesh.style[rulen] = rule;
        }
        return pen;
      } else {
        return pen.pesh.style;
      }
    };
    pen.attr = function(attrnm, attr) {
      if (attrnm != null) {
        if (attr != null) {
          if (type(attrnm) === 'object') {
            for (attr in attrnm) {
              pen.pesh.setAttribute(attr, attrnm[attr]);
            }
          } else {
            pen.pesh.setAttribute(attrnm, attr);
          }
          return pen;
        } else {
          return pen.pesh.getAttribute(attrnm);
        }
      } else {
        return pen.pesh.attributes;
      }
    };
    pen.Remove = function() {
      pen.pesh.parentNode.removeChild(pen.pesh);
      return pen;
    };
    pen.Append = function(...els) {
      var el, j, len;
      for (j = 0, len = els.length; j < len; j++) {
        el = els[j];
        if (el === pen) {
          pen.pesh.appendChild(el.pesh);
        } else {
          pen.pesh.appendChild(el);
        }
      }
      return pen;
    };
    pen.AppendTo = function(el) {
      el.appendChild(pen.pesh);
      return pen;
    };
    pen.On = function(type, fn, cp = false) {
      pen.pesh.addEventListener(type, fn, cp);
      return pen;
    };
    pen.Type = function(args) {
      return type(arg);
    };
    pen.options = {
      "auto append": false,
      "to selector": false,
      "select all": false,
      "debug mode": false,
      "normally append to": "body"
    };
    pen.returnElement = function() {
      return pen.pesh;
    };
    pen.error = function(pref, msg) {
      throw new Error(`Pen-${(pref != null ? pref : '')}${msg}`);
    };
    pen.setOptions = function(optionstr, option) {
      var ops;
      ops = {
        "auto append": "auto append",
        "debug mode": "debug mode",
        "to selector": "to selector",
        "select all": "select all",
        "normally append to": "normally append to"
      };
      if (optionstr != null) {
        if (type(optionstr) === 'object') {
          for (option in optionstr) {
            if (ops[option] != null) {
              pen.options[option] = optionstr[option];
            } else {
              pen.error("Set-options", `option ${option} doesn't exist`);
            }
          }
        } else {
          pen.options[optionstr] = option;
        }
      }
      return pen;
    };
    return pen;
  };
  if (typeof pen === 'undefined') {
    window.pen = Pendef();
  }
  if (typeof process !== "undefined" && process !== null) {
    if (typeof module !== "undefined" && module !== null) {
      if (module.exports != null) {
        module.exports = Pendef();
      }
    }
  }
})(window, document);
