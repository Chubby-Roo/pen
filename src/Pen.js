// Generated by CoffeeScript 2.0.0-alpha1
var Events, Pen, Tags, attrs;

Tags = "a link style p pre audio b u s img block video span ul li ol code lable legend div h1 h2 h3 h4 h5 h6 form fieldset input button abbr canvas script br hr table tbody td textarea body head em dl dt header html i iframe colgroup datalist dd del details dfn dialog footer ins kbd main map mark menu ruby rp rt samp section embed wbr source track param meta keygen tr time var area base col".split(/\s+/);

attrs = "src href type rel style id type value class title width height name charset action align alt async autocomplete autofocus autoplay bgcolor border challenge charset checked cite color cols colspan content contenteditable contextmenu accesskey data dir draggable dropzone hidden lang spellcheck tabindex translate".split(/\s+/);

Events = "blue click change dblclick error focus input keydown keyup keypress load mousedown mousemove mouseover mouseout mouseup resize scroll select submit unload".split(/\s+/);

Pen = (function() {
  class Pen {
    optionHandler(optionsObj) {
      var i, j, len, option, options;
      options = "autoAppend debug console styleConfig".split(/\s+/);
      for (option in optionsObj) {
        for (j = 0, len = options.length; j < len; j++) {
          i = options[j];
          if (i.match(new RegExp(option, "gi"))) {
            this.options[option] = optionsObj[option];
          }
        }
      }
    }

    constructor(optionsObj) {
      this.options = {
        autoAppend: null,
        debug: null,
        console: null,
        styleConfig: null
      };
      if (optionsObj != null) {
        this.optionHandler(optionsObj);
      }
      return this;
    }

    setOptions(optionsObj) {
      this.optionHandler(optionsObj);
    }

    getOption(option) {
      return this.options[option];
    }

    build(el, txt, obj, els) {
      var attr, i, j, k, len, len1;
      el = document.createElement(el);
      el.innerHTML = txt;
      for (attr in obj) {
        for (j = 0, len = Events.length; j < len; j++) {
          i = Events[j];
          if (i.match(new RegExp(attr, "gi"))) {
            el.setAttribute(`on${attr}`, obj[attr]);
          }
        }
        for (k = 0, len1 = attrs.length; k < len1; k++) {
          i = attrs[k];
          if (i.match(new RegExp(attr, "gi"))) {
            el.setAttribute(attr, obj[attr]);
          }
        }
      }
      log(els.toString());
      return el;
    }

  };

  Tags.forEach(function(tag) {
    return Pen.prototype[tag] = function(txt, obj, els) {
      return this.build(tag, txt, obj, els);
    };
  });

  return Pen;

})();
