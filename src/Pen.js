// Generated by CoffeeScript 2.0.0-alpha1
(function(window) {
  var Pendef, error, log;
  log = console.log, error = console.error;
  Pendef = function() {
    var accpro, pen;
    accpro = function(el) {
      return el.__proto__.__proto__.__proto__;
    };
    pen = function(el) {
      var srm;
      if (el === null) {
        throw new Error(`parameter in main function cannot be ${el}`);
      } else if (typeof el === 'undefined') {
        throw new Error(`parameter in main function cannot be ${typeof el}`);
      } else if (typeof el === 'number') {
        throw new Error(`parameter in main function cannot be ${typeof el}`);
      } else if (typeof el === 'boolean') {
        throw new Error(`parameter in main function cannot be ${typeof el}`);
      } else if (typeof el === 'function') {
        throw new Error(`parameter in main function cannot be ${typeof el}`);
      }
      srm = "Html Css Attr On Append AppendTo Href Value Id Class".split(/\s+/);
      pen.cre = {};
      if (pen.options["to selector"] === true) {
        if (typeof el === 'string') {
          pen.cre["el"] = document.querySelector(el);
        } else {
          pen.cre["el"] = el;
        }
      } else {
        if (typeof el === 'string') {
          pen.cre["el"] = document.createElement(el);
        } else {
          pen.cre["el"] = el;
        }
      }
      srm.forEach(function(func) {
        return accpro(pen.cre["el"])[func] = pen[func];
      });
      pen.accesel = function() {
        return pen.cre["el"];
      };
      if (pen.options["auto append"] !== false) {
        if (pen.options["normally append to"] === "body") {
          document.body.appendChild(pen.cre["el"]);
        } else {
          document.head.appendChild(pen.cre["el"]);
        }
        return pen.cre["el"];
      } else {
        return pen.cre["el"];
      }
    };
    pen.Attr = function(stroobj, str) {
      var attr, el;
      el = pen.accesel();
      if (stroobj != null) {
        if (typeof stroobj === 'string') {
          if (str != null) {
            el.setAttribute(stroobj, str);
            return el;
          } else {
            return el.getAttribute(stroobj);
          }
        } else {
          for (attr in stroobj) {
            el.setAttribute(attr, stroobj[attr]);
          }
        }
      } else {
        return el.attributes;
      }
      return el;
    };
    pen.Class = function(nm) {
      var el;
      el = pen.accesel();
      el.setAttribute("class", nm);
      return el;
    };
    pen.Id = function(nm) {
      var el;
      el = pen.accesel();
      el.setAttribute("id", nm);
      return el;
    };
    pen.Html = function(str, app = false) {
      var el;
      el = pen.accesel();
      if (str != null) {
        if (app === false) {
          el.innerHTML = str;
        } else {
          el.innerHTML += str;
        }
        return el;
      } else {
        return el.innerHTML;
      }
      return el;
    };
    pen.Value = function(str, app = false) {
      var el;
      el = pen.accesel();
      if (str != null) {
        if (app === false) {
          el.value = str;
        } else {
          el.value += str;
        }
        return el;
      } else {
        return el.value;
      }
      return el;
    };
    pen.Css = function(type, str) {
      var el;
      el = pen.accesel();
      el.style[type] = str;
      return el;
    };
    pen.On = function(type, func, cp = false) {
      var el;
      el = pen.accesel();
      el.addEventListener(type, func, cp);
      return el;
    };
    pen.Click = function(func, cp = false) {
      var el;
      el = pen.accesel();
      el.addEventListener("click", func, cp);
      return el;
    };
    pen.Append = function(...elems) {
      var el, elem, i, index, len;
      el = pen.accesel();
      for (index = i = 0, len = elems.length; i < len; index = ++i) {
        elem = elems[index];
        el.appendChild(elem);
      }
      return el;
    };
    pen.AppendTo = function(elem) {
      var el;
      el = pen.accesel();
      elem.appendChild(el);
      return el;
    };
    pen.Href = function(hr) {
      var el;
      el = pen.accesel();
      el.setAttribute("href", hr);
      return el;
    };
    pen.options = {};
    pen.options["auto append"] = false;
    pen.options["to selector"] = false;
    pen.options["normally append to"] = "body";
    pen.setOptions = function(optionname, val) {
      pen.options[optionname] = val;
      return void 0;
    };
    pen.GetOpitions = function(option) {
      if (option != null) {
        return pen.options[option];
      } else {
        return pen.options;
      }
    };
    return pen;
  };
  if (typeof pen === 'undefined') {
    window.pen = Pendef();
  }
})(window);
