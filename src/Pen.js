// Generated by CoffeeScript 2.0.0-alpha1
var Pen, body, doc, exists, head, log, pro;

log = console.log;

doc = document;

pro = function(arg) {
  return arg.prototype;
};

exists = function(arg) {
  return arg != null;
};

pro(String).getInput = function(reg) {
  var a, str;
  str = this;
  a = void 0;
  while ((a = reg.exec(str)) !== null) {
    if (a.index === reg.lastIndex) {
      reg.lastIndex++;
    }
    return a;
  }
};

if (document.body != null) {
  body = document.body;
} else {
  alert("Body is not defined in the html document.");
}

if (document.head != null) {
  head = document.head;
} else {
  alert("Head is not defined in the html document.");
}

Pen = class Pen {
  constructor(auto, stylcon) {
    var style;
    this.auto = auto;
    style = document.createElement('style');
    if (stylcon != null) {
      style.innerHTML = stylcon;
    }
    head.appendChild(style);
    this.para = this.create('p');
    body.appendChild(this.para);
    return;
  }

  changeOption(op) {
    this.auto = op;
  }

  appendToHead(...el) {
    var i, results;
    i = 0;
    results = [];
    while (i < el.length) {
      head.appendChild(el[i]);
      results.push(i++);
    }
    return results;
  }

  appendToBody(...el) {
    var i, results;
    i = 0;
    results = [];
    while (i < el.length) {
      body.appendChild(el[i]);
      results.push(i++);
    }
    return results;
  }

  create(el) {
    return document.createElement(el);
  }

  getIdOf(el) {
    return document.getElementById(el);
  }

  getNameOf(el) {
    return document.getElementsByName(el);
  }

  getClassOf(el) {
    return document.getElementsByClassName(el);
  }

  getTagsOf(el) {
    return document.getElementsByTagName(el);
  }

  select(txt) {
    return document.querySelector(txt);
  }

  selectAll(txt) {
    return document.querySelectorAll(txt);
  }

  checker() {
    if (this.auto === true) {
      return true;
    } else {
      return false;
    }
  }

  autoAppend(el) {
    if (this.checker() === true) {
      body.appendChild(el);
      return el;
    } else {
      return el;
    }
  }

  oEl(el, ...oel) {
    var i;
    if (!oel) {
      return el;
    } else {
      i = 0;
      while (i < oel.length) {
        el.appendChild(oel[i]);
        i++;
      }
    }
    return el;
  }

  createAppend(el) {
    el = this.create(el);
    return this.autoAppend(el);
  }

  checkElement(el) {
    if (typeof el === 'string') {
      el = this.select(el);
    }
    return el;
  }

  createWithObj(el, obj, txt) {
    el = this.create(el);
    el = this.objHandler(el, obj);
    return el;
  }

  createWithText(el, txt) {
    el = this.create(el);
    el.innerHTML = txt;
    return el;
  }


  /*
   * ^^^^^
   * Helpers
   * -------
   * Handlers
   * vvvvv
   */

  objHandler(el, obj, txt, type) {
    var i;
    if (type != null) {
      if (type.match(/input/gi)) {
        if (txt != null) {
          el.value = txt;
        }
      } else {
        if (txt != null) {
          el.innerHTML = txt;
        }
      }
    }
    if (obj.title != null) {
      el.setAttribute("title", obj.title);
    }
    if (obj.style != null) {
      el.setAttribute("style", obj.style);
    }
    if ((obj.id != null) || (obj.identification != null)) {
      el.setAttribute("id", obj.id || obj.identification);
    }
    if ((obj.click != null) || (obj.onclick != null)) {
      el.setAttribute("onclick", obj.click || obj.onclick);
    }
    if ((obj["class"] != null) || (obj.classes != null)) {
      if (obj["class"] instanceof Array === true || obj.classes instanceof Array === true) {
        i = 0;
        while (i < obj["class"] || i < obj.classes) {
          el.setAttribute("class", obj["class"][i] || obj.classes[i]);
          i++;
        }
      } else {
        el.setAttribute("class", obj["class"] || obj.classes);
      }
    }
    return el;
  }

  areaHandler(el, obj, txt) {
    el = this.objHandler(el, obj, txt);
    if (obj.width != null) {
      el.setAttribute("width", obj.width);
    }
    if (obj.height != null) {
      el.setAttribute("height", obj.height);
    }
    return el;
  }

  inputHandler(el, obj, txt) {
    el = this.objHandler(el, obj, txt, 'input');
    if (obj.type != null) {
      el.setAttribute("type", obj.type);
    } else {
      el.setAttribute("type", "text");
    }
    return el;
  }

  linkAndSourceHandler(el, obj, txt, type) {
    var err;
    el = this.objHandler(el, obj, txt);
    if (type.match(/link|href/gi)) {
      if (obj.href != null) {
        el.setAttribute("href", obj.href);
      } else {
        err = new Error("'href' must be defined in the object parameter");
        throw err;
      }
    } else if (type.match(/source|src/gi)) {
      if (obj.src != null) {
        el.setAttribute("src", obj.src);
      } else {
        err = new Error("'src' must be defined in the object parameter");
        throw err;
      }
    }
    return el;
  }

  dividerHandler(el) {
    return el;
  }

  automaticHandler(el, txt, obj, oel) {
    el = this.create(el);
    el = this.objHandler(el, obj, txt);
    if (oel != null) {
      el = this.oEl(el, oel);
    }
    return this.autoAppend(el);
  }

  automaticLinkHandler(el, type, txt, obj, oel) {
    el = this.create(el);
    el = this.linkAndSourceHandler(el, obj, txt, type);
    if (oel != null) {
      el = this.oEl(el, oel);
    }
    return this.autoAppend(el);
  }

  automaticInputHandler(el, txt, obj) {
    el = this.create(el);
    el = this.inputHandler(el, obj, txt);
    return this.autoAppend(el);
  }

  automaticAreaHandler(el, txt, obj) {
    el = this.create(el);
    el = this.areaHandler(el, obj, txt);
    return this.autoAppend(el);
  }

  automaticDividerHandler(el) {
    el = this.create(el);
    el = this.dividerHandler(el);
    return this.autoAppend(el);
  }


  /*
   * ^^^^^
   * Handlers
   * -------
   * Methods
   * vvvvv
   */

  Html(el, txt) {
    el = this.checkElement(el);
    if (typeof txt === 'object') {
      JSON.parse(txt);
    }
    if (typeof txt === 'function') {
      txt = txt(el);
    }
    el.innerHTML = txt;
    return el;
  }

  Css(el, txt) {
    el = this.checkElement(el);
    el.setAttribute('style', txt);
    return el;
  }

  Id(el, txt) {
    el = this.checkElement(el);
    el.setAttribute('id', txt);
    return el;
  }

  Type(el, txt) {
    el = this.checkElement(el);
    el.setAttribute('type', txt);
    return el;
  }

  On(el, type, fn, cp) {
    el = this.checkElement(el);
    el.addEventListener(type, fn, cp);
    return el;
  }

  Click(el) {
    el = this.checkElement(el);
    el.click();
    return el;
  }

  Append(el, ...el2) {
    var i;
    el = this.checkElement(el);
    i = 0;
    while (i < el2.length) {
      el.appendChild(el2[i]);
      i++;
    }
  }


  /*
   * ^^^^^
   * Methods
   * -------
   * Tags
   * vvvvv
   */

  p(txt, obj) {
    return this.automaticHandler('p', txt, obj);
  }

  div(obj, txt, oel) {
    return this.automaticHandler('div', txt, obj, oel);
  }

  span(obj, txt, oel) {
    return this.automaticHandler('span', txt, obj, oel);
  }

  a(obj, txt, oel) {
    return this.automaticLinkHandler('a', "href", txt, obj, oel);
  }

  ul(obj, txt, oel) {
    return this.automaticHandler('ul', txt, obj, oel);
  }

  li(obj, txt, oel) {
    return this.automaticHandler('li', txt, obj, oel);
  }

  code(obj, txt) {
    return this.automaticHandler('code', txt, obj);
  }

  pre(obj, txt) {
    return this.automaticHandler('pre', txt, obj);
  }

  label(obj, txt) {
    return this.automaticHandler('label', txt, obj);
  }

  legend(obj, txt) {
    return this.automaticHandler('legend', txt, obj);
  }

  form(obj, txt, oel) {
    return this.automaticHandler('form', txt, obj, oel);
  }

  fieldset(obj, txt, oel) {
    return this.automaticHandler('fieldset', txt, obj, oel);
  }

  input(obj, txt) {
    var err;
    if (obj.type === 'button') {
      if (!txt) {
        err = new Error("the value for the button is not defined.");
        throw err;
      }
    }
    return this.automaticInputHandler('input', txt, obj);
  }

  button(obj, txt) {
    return this.automaticHandler('button', txt, obj);
  }

  abbr(obj, txt) {
    return this.automaticHandler('abbr', txt, obj);
  }

  style(txt, obj) {
    return this.automaticHandler('style', txt, obj);
  }

  script(txt, obj) {
    return this.automaticHandler('script', txt, obj);
  }

  canvas(obj, txt) {
    return this.automaticHandler('canvas', txt, obj);
  }

  h1(txt, obj) {
    return this.automaticHandler('h1', txt, obj);
  }

  h2(txt, obj) {
    return this.automaticHandler('h2', txt, obj);
  }

  h3(txt, obj) {
    return this.automaticHandler('h3', txt, obj);
  }

  h4(txt, obj) {
    return this.automaticHandler('h4', txt, obj);
  }

  h5(txt, obj) {
    return this.automaticHandler('h5', txt, obj);
  }

  h6(txt, obj) {
    return this.automaticHandler('h6', txt, obj);
  }

  br() {
    return this.automaticDividerHandler('br');
  }


  /*
   * ^^^^^
   * Tags
   * -------
   * Methods part 2
   * vvvvv
   */

  write(txt) {
    var cover, link;
    if (txt instanceof Object === true) {
      txt = JSON.stringify(txt);
    }
    if (txt instanceof Array === true) {
      txt = txt.join(', ');
    }
    this.para.setAttribute("class", "console");
    txt = txt.replace(/;|`n|\\n/gi, '.<br>');
    if (txt.match(/\((.*?)\)\[(.*?)\]/gi)) {
      link = txt.getInput(/\((.*?)\)\[(.*?)\]/gi)[2];
      cover = txt.getInput(/\((.*?)\)\[(.*?)\]/gi)[1];
    }
    txt = txt.replace(/\((.*?)\)\[(.*?)\]/gi, `<a href='${link}' title='${link}'>${cover}</a>`);
    return this.para.innerHTML += txt;
  }


  /*
   * ^^^^^
   * Methods part 2
   * -------
   * other helpful constructors
   * vvvvv
   */

  Card(obj) {
    var checkEdit, cont, desc, h4, i, p, title;
    checkEdit = function(el) {
      if (obj.contedit != null) {
        el.contentEditable = obj.contedit;
      }
    };
    cont = pen.createWithObj("div", {
      "class": 'card'
    });
    title = pen.createWithObj("div", {
      "class": 'card-title'
    });
    desc = pen.createWithObj("div", {
      "class": 'card-desc'
    });
    if (obj.title != null) {
      if (obj.title instanceof Array === true) {
        i = 0;
        while (i < obj.title.length) {
          h4 = pen.createWithText("h4", obj.title[i]);
          h4 = checkEdit(h4);
          this.Append(title, h4);
          i++;
        }
      } else {
        h4 = pen.createWithText("h4", obj.title);
        h4 = checkEdit(h4);
        this.Append(title, h4);
      }
    }
    if (obj.desc != null) {
      if (obj.desc instanceof Array === true) {
        i = 0;
        while (i < obj.desc.length) {
          p = pen.createWithText("p", obj.desc[i]);
          p = checkEdit(p);
          this.Append(desc, p);
          i++;
        }
      } else {
        p = pen.createWithText("p", obj.desc);
        p = checkEdit(p);
        this.Append(desc, p);
      }
    }
    return cont;
  }

};
