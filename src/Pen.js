// Generated by CoffeeScript 2.0.0-alpha1
(function(window, document) {
  var Pendef, dir, error, log, type;
  log = console.log, error = console.error, dir = console.dir;
  type = (function() {
    var classToType, i, j, len, name, ref;
    classToType = {};
    ref = "Boolean Number String Function Array Date RegExp Undefined Null Error Symbol".split(/\s+/);
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      name = ref[i];
      classToType[`[object ${name}]`] = name.toLowerCase();
    }
    return function(obj) {
      var strType;
      strType = Object.prototype.toString.call(obj);
      return classToType[strType] || "object";
    };
  })();
  Pendef = function() {
    var pen;
    pen = function(el) {
      pen.pesh = document.createElement(el);
      return pen;
    };
    pen.Html = function(str, app = false) {
      switch (pen.pesh.tagName.toLowerCase()) {
        case 'input':
        case 'textarea':
          if (str != null) {
            if (app === false) {
              pen.pesh.value = str;
              return pen;
            } else {
              pen.pesh.value += str;
              return pen;
            }
          } else {
            return pen.pesh.value;
          }
          break;
        default:
          if (str != null) {
            if (app === false) {
              pen.pesh.innerHTML = str;
              return pen;
            } else {
              pen.pesh.innerHTML += str;
              return pen;
            }
          } else {
            return pen.pesh.innerHTML;
          }
      }
    };
    pen.Css = function(rulen, rule) {
      if (rulen != null) {
        if (type(rulen) === 'object') {
          for (rule in rulen) {
            pen.pesh.style[rule] = rulen[rule];
          }
        } else {
          pen.pesh.style[rulen] = rule;
        }
        return pen;
      } else {
        return pen.pesh.style;
      }
    };
    return pen;
  };
  if (typeof pen === 'undefined') {
    window.pen = Pendef();
  }
})(window, document);
